<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_IPRO_ModbusRTU" Id="{779a38f8-03a4-4a78-bdd8-18318bba4a44}" SpecialFunc="None">
    <Declaration><![CDATA[(* this FB violate Encapsulation of OOP because it still Developing and test to understand how this device work
-------------------------read the document bellow---------------------------------------------------------------*)
FUNCTION_BLOCK FB_IPRO_ModbusRTU EXTENDS FB_ModbusSlaveRtu IMPLEMENTS I_Ipro_MotorPower;
VAR
	eState : E_IPro_State;
// Write Modbus
	bControlModeSwitchCommand	: BOOL;						(* write p4.15 *)
	bFieldbusEnableServoCommand	:  BOOL;					(* write p4.11 0:Disable, 1:Anable *)
	eControlMode : E_IProCtrlMode;
	lrPositivePositionSoftwareLimit : LREAL;
	lrNagativePositionSoftwareLimit	: LREAL;
	lrMaxSpeedLimitOfControlModeSwitch : LREAL := 100;		(* P0.90 Add:1180 :Set the max. running speed during positioning when switching from speed mode or torque mode to position mode under position/speed, position/torque compound mode.*)
	lrPositionCmd : LREAL;									(* p4.12 Position value unit:(10000/rotary) *)
	lrSpeedCmd : LREAL;										(* p4.13 Unit:(rotary/minute) *)
	lrTorqueCmd	: LREAL; 									(* p4.14 Unit:% *)
	lrMaxSpeed	: LREAL; 									(* p4.31 Unit:(rotary/minute) *)
	lrMaxTorque	: LREAL; 									(* p0.10 Unit:% *) 
	bEmergenCyStop : BOOL;									(* p4.23 add:1846 16 bit :If P4.10 is 1, this parameter can be used to set emergency stop command. *)
	
// Read modbus
	lrSpeedFeedback	: LREAL;								(* r0.00 *) 
	lrTorqueFeedback : LREAL;								(* r0.06 *)
	lrPositionFeedback : LREAL;								(* r0.02 *)
	nFaultCode : INT; 										(* r0.99 *)
	eSystemStatus : E_IProStatus; 							(* r0.30 *)
	eCurrentMode : E_IProCurrentMode ;						(* r0.32 0: Position mode, 1: speed mode, 2: torque Mode*) 
							
	TempData_Word2real : U_Word2Real;
	TempData_Word2Dint	: U_Word2Dint;
	TempData_Word2Int	: U_Word2Int;

// State Handing
	bInit: BOOL;
	bHome: BOOL;
	bBusy: BOOL;
	bMoveAbsolute: BOOL;
	bReset: BOOL;
	bMoveTorque: BOOL;
	bStopped: BOOL; 						// StopDone
	bStop: BOOL;							// StopRequest
	lrHomePosition: LREAL;
	bHomed: BOOL;							// home done
	bInited: BOOL;							// Init Done
	bMoveAbsoluted: BOOL;					// MoveAbs Done
	bMoveTorqued: BOOL;						// MoveTorque Done
	bAbort: BOOL;							// Abort Request
	bActive: BOOL;
END_VAR

(*-------------------Document-------------
	1 set param in drive soft
	2 if set the control mode is different than Curren control mode on the Drive, The drive need restart by drive soft OR turn off power
	3 if the control mode swith command is TRUE, the current control mode will change according to the second mode if eControlMode have
	for example eControlMode = PositionTorque, when bControlModeSwitchCommand = false , currentmode is Position, else current mode is torque if it can
*)
]]></Declaration>
    <Implementation>
      <ST><![CDATA[bActive := eState >= IPRO_READY_INITIALIZED;
StateMachine();
bError := nFaultCode <> 0;
SUPER^();
CASE eState OF
	IPRO_INITIALIZING..IPRO_RESET_DONE, IPRO_ABORTING:
		tonConfirmReallyError(
			IN := bError OR bModbusError,
			PT := timeConfirmReallyError,
			Q => bReallyError 
		);
END_CASE]]></ST>
    </Implementation>
    <Folder Name="Parameters" Id="{135f1342-f3ac-470e-b188-26cd0d7b27c7}" />
    <Folder Name="parent" Id="{6b07bf69-3a52-4263-9762-d97c1b99a02c}" />
    <Folder Name="Requests" Id="{fab6c147-feaf-4bd7-9ed7-49433b01dc12}" />
    <Folder Name="SetBeforInit" Id="{f9ae4f66-d74b-40ad-8929-ca4d65a2caf5}" />
    <Folder Name="StateMachine" Id="{bc03708e-6405-480e-aa24-527bc8f89ef2}" />
    <Folder Name="Status" Id="{40a08b4a-5fb9-44d8-be2c-031269a557ba}" />
    <Property Name="Active" Id="{b4a9866b-0d33-4922-95c7-beca9bac3388}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY Active : bool]]></Declaration>
      <Get Name="Get" Id="{78e8bb07-e221-4b68-8e28-09652440fb31}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active := bActive;
 ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{04fd7b58-cd07-4eba-8564-70318006a4ac}" FolderPath="Status\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Busy : bool]]></Declaration>
      <Get Name="Get" Id="{4c84cee3-c2c5-4fe5-9f67-ec059c453e7a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := bBusy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ControlMode" Id="{82f3a655-7191-41d9-b3e9-013c4502fd03}" FolderPath="SetBeforInit\">
      <Declaration><![CDATA[PROPERTY ControlMode : E_IProCtrlMode]]></Declaration>
      <Get Name="Get" Id="{f24d0a22-b23c-4e93-b024-b2cd29a0591e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fac56fc0-c696-47ae-b960-e57bcfe47507}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	THIS^.eControlMode := ControlMode;
END_IF

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ControlModeSwitchCmd" Id="{a97f4de7-79f1-4a8b-aeb0-fb6d46c8368c}" FolderPath="Parameters\">
      <Declaration><![CDATA[PROPERTY ControlModeSwitchCmd : bool]]></Declaration>
      <Get Name="Get" Id="{fa8c8626-2fdf-4d50-9d7b-b003da3c03a4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ControlModeSwitchCmd := bControlModeSwitchCommand;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Convert" Id="{a0f2c8db-6069-46f2-b7e6-10beb6b999d1}" FolderPath="parent\">
      <Declaration><![CDATA[METHOD Convert : BOOL
VAR_INPUT
	iRegionNo	:	INT;
	pReadData	:	POINTER TO word;
END_VAR
VAR
	iLoop		: 	INT;
	TempData	:	 U_Word2Dint;
	TempData_w2i	: U_Word2Int;
	TempData_Int	: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	TempData.iWord[0] := pReadData[0];
	TempData.iWord[1] := pReadData[1];
	TempData_w2i.iWord := pReadData[0];
	TempData_Int := TempData_w2i.iInt;
CASE iRegionNo OF 
	0:// speed 0.1 r/m
		lrSpeedFeedback := DINT_TO_LREAL(TempData.idInt)*0.1;//32 bit
	1:// position unit 1
	
		lrPositionFeedback := DINT_TO_LREAL(TempData.idInt); //64 bit
	2:// torque 0.1
		lrTorqueFeedback := INT_TO_LREAL(TempData_Int)*0.1;
	3:
		eSystemStatus := pReadData[0];
	4:
		eCurrentMode := pReadData[0];
	5:
		nFaultCode := pReadData[0];// must not use word to int

	
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentMode" Id="{d11bf5fa-8718-44ad-8a77-3f70675bc099}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY CurrentMode : E_IProCurrentMode]]></Declaration>
      <Get Name="Get" Id="{0142fdff-63a5-4bb1-b024-753ebd04f18c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentMode := eCurrentMode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Enable" Id="{855be6cb-afa6-4670-b51a-ed92bd24485e}" FolderPath="Parameters\">
      <Declaration><![CDATA[PROPERTY Enable : bool]]></Declaration>
      <Get Name="Get" Id="{1487b77a-cc23-4513-8843-d56b811200cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Enable := bFieldbusEnableServoCommand;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{0b249e37-0a65-4ec1-a1e6-71c97f90b6db}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY ErrorID : REFERENCE TO INT
]]></Declaration>
      <Get Name="Get" Id="{0e3d4b6a-993d-4a39-b37f-82be1b4cd517}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID REF= nFaultCode;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InPosition" Id="{4ad81687-b948-4488-aa5b-2ac52454fe3d}" FolderPath="Status\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY InPosition : bool]]></Declaration>
      <Get Name="Get" Id="{cafeb194-f541-43df-9a96-6fa2f21aa8ce}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InPosition := F_CheckInRange( lrHighLimit := lrPositionFeedback + 20,
						lrLowLimit := lrPositionFeedback - 20,
						lrValue := lrPositionCmd)	;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsHomed" Id="{25150335-f115-450b-8103-c4c59b87dcd8}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY IsHomed : bool]]></Declaration>
      <Get Name="Get" Id="{2d3d439b-5162-456e-97d7-e2931abe5269}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsHomed := F_CheckInRange( lrHighLimit := lrPositionFeedback + 10,
						lrLowLimit := lrPositionFeedback - 10,
						lrValue := lrHomePosition)	;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsInTorque" Id="{5cc895c7-6ab9-4745-bbf3-251c0a00b39b}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY IsInTorque : bool]]></Declaration>
      <Get Name="Get" Id="{3e20b4a0-b649-4f36-97c9-bad969a3fe7d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isIntorque := F_CheckInRange( lrHighLimit := lrTorqueFeedback + 0.5,// 1%
					lrLowLimit := lrTorqueFeedback -0.5 ,
					lrValue := lrTorqueCmd) ;// +-0.5%	;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsStop" Id="{721186bc-60dd-4115-8523-deb6a9e576b6}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY IsStop : bool // not moving ]]></Declaration>
      <Get Name="Get" Id="{8a4cae79-0c89-49af-94e4-a422fbdbcc15}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsStop := eSystemStatus =  IPRO_STATUS_FAULT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MaxSpeed" Id="{efa9fab6-f7e3-406f-adb2-b575f7b68621}" FolderPath="SetBeforInit\">
      <Declaration><![CDATA[PROPERTY MaxSpeed : lreal// large than 0]]></Declaration>
      <Get Name="Get" Id="{7a42f7f8-ceb6-4e59-88ef-de6a9a2782d1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxSpeed := lrMaxSpeed;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ef5b532c-d4c2-4431-917a-6cd0d488cedb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	lrMaxSpeed := MaxSpeed;
END_IF

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MaxTorque" Id="{8197c65c-569c-4655-9971-34203364c4a1}" FolderPath="SetBeforInit\">
      <Declaration><![CDATA[PROPERTY MaxTorque : Lreal// // % larger than 0]]></Declaration>
      <Get Name="Get" Id="{1222d17e-9006-4bc5-910b-dd7509f7de1e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxTorque := lrMaxTorque;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9a3480e6-a1ae-4445-be64-e3d7fd6f3a0c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	lrMaxTorque := MaxTorque;
END_IF

arrAddressWrite[10][2] :=  LREAL_TO_WORD(ABS(lrMaxTorque*10));]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MR_Abort" Id="{c01a224b-502a-4fb8-86bb-578474547fce}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Abort : BOOL // THIS IS REQUEST ABORT. => ACTIVE = False

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState >= IPRO_INITIALIZING THEN
	bAbort := TRUE;
	MR_Abort := FALSE;
	bBusy := TRUE;
	eState := IPRO_ABORTING;
ELSIF eState = IPRO_UNINITIALIZED THEN
	bAbort := FALSE;
	MR_Abort := TRUE;
	bBusy := False;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Home" Id="{0bedcd25-5802-4be5-b446-f54e355f5942}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Home : BOOL // control mode must have Position Mode // actually it the same as MOVE absolute 
VAR_INPUT
	lrHomePosition : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = IPRO_IDLE AND eCurrentMode = IPRO_CURRENT_MODE_POSITION 
AND NOT F_CheckInRange(lrHighLimit := lrHomePosition + 10,
					lrLowLimit := lrHomePosition - 10,
					lrValue := lrPositionFeedback)
THEN 
	bHome := TRUE;
	bHomed := FALSE;
	bBusy := TRUE;
	MR_Home := FALSE;
 	eState := IPRO_HOME;
	THIS^.lrHomePosition := lrHomePosition;
ELSIF  eState = IPRO_IDLE AND eCurrentMode <> IPRO_CURRENT_MODE_POSITION THEN 
	bHome := TRUE;
	bHomed := FALSE;
	bBusy := TRUE;
	MR_Home := FALSE;
 	MS_SwitchMode(eModeChangeTo := IPRO_CURRENT_MODE_POSITION);

ELSIF eState = IPRO_HOME_DONE THEN
	bHomed := TRUE;
	bHome := FALSE;
	bBusy := FALSE;
	MR_Home := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Init" Id="{bdf0da52-3dbd-43dd-b4d0-dd24e17ac0ad}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Init : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	bInit := TRUE;
	bInited := FALSE;
	bBusy := TRUE;
	MR_Init := FALSE;
	eState := IPRO_INITIALIZING;
ELSIF eState = IPRO_READY_INITIALIZED THEN
	bInited := True;
	bInit := FALSE;
	bBusy := FALSE;
	MR_Init := TRUE;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_MoveAbsolute" Id="{ca744ba7-f549-4cdc-bd1f-573625e34a4f}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_MoveAbsolute : BOOL // control mode must have Position Mode
VAR_INPUT
	lrAbsolutePosition : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = IPRO_IDLE 
AND eCurrentMode = IPRO_CURRENT_MODE_POSITION 
AND NOT F_CheckInRange( lrHighLimit := lrPositionFeedback + 10,
						lrLowLimit := lrPositionFeedback - 10,
						lrValue := lrAbsolutePosition)													
THEN
	lrPositionCmd := lrAbsolutePosition;
	MR_MoveAbsolute := FALSE;
	bBusy := TRUE;
	bMoveAbsolute := TRUE;
	bMoveAbsoluted := FALSE;
	eState := IPRO_MOVE_ABSOLUTE;
ELSIF eState = IPRO_IDLE  AND eCurrentMode <> IPRO_CURRENT_MODE_POSITION THEN
	MR_MoveAbsolute := FALSE;
	bBusy := TRUE;
	bMoveAbsolute := TRUE;
	bMoveAbsoluted := FALSE;
	MS_SwitchMode( eModeChangeTo := IPRO_CURRENT_MODE_POSITION);// if switch mode ok => eCurrentMode = IPRO_CURRENT_MODE_POSITION 

ELSIF eState = IPRO_MOVE_ABSOLUTE_DONE THEN
	bBusy := FALSE;
	bMoveAbsolute := FALSE;
	MR_MoveAbsolute := TRUE;
	bMoveAbsoluted := TRUE;
	
ELSIF  eState = IPRO_IDLE 
	AND eCurrentMode = IPRO_CURRENT_MODE_POSITION 
	AND F_CheckInRange( lrHighLimit := lrPositionFeedback + 10,
							lrLowLimit := lrPositionFeedback - 10,
							lrValue := lrAbsolutePosition)													
	THEN
		bBusy := FALSE;
		bMoveAbsolute := FALSE;
		MR_MoveAbsolute := TRUE;
		bMoveAbsoluted := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_MoveTorque" Id="{0d0a9f5b-f53f-4d27-b09a-5da162d32222}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_MoveTorque : BOOL // control mode must have torque Mode edit :Torque can be change every time if needed;
VAR_INPUT
	lrTorque	: LREAL;// must smaller than max torque
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF eState = IPRO_IDLE
	AND eCurrentMode = IPRO_CURRENT_MODE_TORQUE 
	AND NOT F_CheckInRange(
				lrHighLimit := lrTorqueFeedback + 0.5,// 1%
				lrLowLimit := lrTorqueFeedback -0.5 ,
				lrValue := lrTorque) // +-0.5%	
THEN
	bMoveTorque	:= TRUE;
	bMoveTorqued	:= FALSE;
	bBusy := TRUE;
	MR_MoveTorque := FALSE;
	eState := IPRO_MOVE_TORQUE;
	lrTorqueCmd := lrTorque;
	
ELSIF eState = IPRO_IDLE
	AND eCurrentMode<>IPRO_CURRENT_MODE_TORQUE
THEN
	MR_MoveTorque := FALSE;
	bBusy := TRUE;
	bMoveTorque := TRUE;
	bMoveTorqued	:= FALSE;
	MS_SwitchMode(eModeChangeTo := IPRO_CURRENT_MODE_TORQUE);// if switch mode ok => eCurrentMode = IPRO_CURRENT_MODE_POSITION 

ELSIF eState = IPRO_IDLE 
	OR eState = IPRO_MOVE_TORQUE_DONE 
THEN
	bBusy := FALSE;
	bMoveTorque := FALSE;
	MR_MoveTorque := TRUE;
	bMoveTorqued	:= TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Reset" Id="{2b2c7fb3-bf71-451a-9128-c4cbe2a3c533}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Reset : BOOL// can't not use this method because i didn't find way to reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*IF eState <> IPRO_RESET AND eState <> IPRO_RESET_DONE THEN
	bReset := TRUE;
	MR_Reset := FALSE;
	eState := IPRO_RESET;
ELSIF eState = IPRO_RESET_DONE THEN
	bReset := FALSE;
	MR_Reset := TRUE;
	
END_IF*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Stop" Id="{4b80d5e7-5616-4415-8bd0-c2a744c8ce87}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_Stop : BOOL ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState >= IPRO_IDLE AND eState <> IPRO_STOP_DONE THEN
	bStop := TRUE;
	bStopped := FALSE;
	MR_Stop := FALSE;
	eState := IPRO_STOP;
	bBusy := TRUE;
ELSIF eState = IPRO_STOP_DONE THEN
	bStop := FALSE;
	bStopped := TRUE;
	MR_Stop := TRUE;
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Aborting" Id="{6669002e-7ddc-4f29-b09d-fa81ccb85f53}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Aborting// still remain all the params set before init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bFieldbusEnableServoCommand := FALSE;
lrSpeedCmd := 0;
lrPositionCmd := 0;
lrTorqueCmd := 0;
bEmergenCyStop := false;
arrAddressWrite[1][2] :=  BOOL_TO_WORD(bFieldbusEnableServoCommand);
IF THIS^.eSystemStatus <> IPRO_STATUS_RUN THEN
	eState := IPRO_UNINITIALIZED;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Home" Id="{a82686d0-19c1-4705-8230-910afbff76c7}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Home
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TempData_Word2Dint.idInt := LREAL_TO_DINT(lrHomePosition);
arrAddressWrite[6][2] := TempData_Word2Dint.iWord[0];
arrAddressWrite[6][3] := TempData_Word2Dint.iWord[1];

IF F_CheckInRange(lrHighLimit := lrHomePosition + 10,
					lrLowLimit := lrHomePosition - 10,
					lrValue := lrPositionFeedback)
THEN
	eState := IPRO_HOME_DONE;
END_IF
				]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_HomeDone" Id="{8c5d1efa-8d28-4f3a-988f-d958eaca4b42}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_HomeDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bHome THEN
	eState := IPRO_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Idle" Id="{8858a3c4-b1ef-4e3d-9003-fec5be52e4f5}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Idle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Initializing" Id="{54c9912c-a57e-47b7-9c2e-cde4ab36bc1f}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Initializing
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// this servo can't reset error by modbus
IF THIS^.eSystemStatus = IPRO_STATUS_READY THEN // Ignor the faultcode AND nFaultCode = 0  THEN
	bFieldbusEnableServoCommand := TRUE;
	arrAddressWrite[1][2] := BOOL_TO_WORD(bFieldbusEnableServoCommand);
END_IF
 
IF eSystemStatus = IPRO_STATUS_RUN THEN
	eState := IPRO_READY_INITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_MoveAbsolute" Id="{b775430d-4bdd-45a4-a486-584aacedb928}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_MoveAbsolute
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TempData_Word2Dint.idInt := LREAL_TO_DINT(lrPositionCmd);
arrAddressWrite[6][2] := TempData_Word2Dint.iWord[0];
arrAddressWrite[6][3] := TempData_Word2Dint.iWord[1];

IF F_CheckInRange(lrHighLimit := lrPositionCmd + 10,
					lrLowLimit := lrPositionCmd - 10,
					lrValue := lrPositionFeedback)
THEN
	eState := IPRO_MOVE_ABSOLUTE_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_MoveAbsoluteDone" Id="{c8076e55-0cd3-419b-915d-ba528fd9900e}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_MoveAbsoluteDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bMoveAbsolute THEN
	eState := IPRO_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_MoveTorque" Id="{1f758174-9816-41b3-b0c1-93e4728f4c89}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_MoveTorque
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TempData_Word2Int.iInt := LREAL_TO_INT(lrTorqueCmd *10);
arrAddressWrite[8][2] :=  TempData_Word2Int.iWord;
(* should by pass this one if not, it can't receive new Torque
IF F_CheckInRange( lrHighLimit := lrTorqueFeedback + 0.5,// 1%
					lrLowLimit := lrTorqueFeedback -0.5 ,
					lrValue := lrTorqueCmd) 
THEN
	eState := IPRO_MOVE_TORQUE_DONE;
END_IF*)
eState := IPRO_MOVE_TORQUE_DONE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_MoveTorqueDone" Id="{8f9b48d7-1fdb-40bd-8df1-6de155336372}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_MoveTorqueDone
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bMoveTorque THEN
	eState := IPRO_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ReadyInitialized" Id="{cbc8a9ef-9949-4a0d-8ef9-e49466e0046c}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ReadyInitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	eState := IPRO_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Reset" Id="{a9cc5e5b-bbec-41b9-b69b-a7457e556196}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ResetDone" Id="{f08aa95a-6a54-4ffd-b94a-dcc9c286e2a9}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ResetDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Stop" Id="{f30ba650-5154-4e65-b042-d8ef3dc35992}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Stop
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEmergenCyStop := TRUE;
arrAddressWrite[11][2] := BOOL_TO_WORD(THIS^.bEmergenCyStop);
IF eSystemStatus = IPRO_STATUS_FAULT THEN
	eState := IPRO_STOP_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_StopDone" Id="{9ad74a08-b438-4ff2-acef-4f3b29d4b54f}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_StopDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bStop THEN
	eState := IPRO_UNINITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_SwitchMode" Id="{40b3eeee-e744-4506-b2ff-c6859ef0c1b9}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_SwitchMode : BOOL;
VAR_INPUT
	eModeChangeTo	: E_IProCurrentMode; // False is the first mode , TRUE is Seconde Mode in Control mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE THIS^.eControlMode OF
	
	IPRO_CTRL_MODE_POSITION_TORQUE:
		IF eModeChangeTo = IPRO_CURRENT_MODE_POSITION THEN
			bControlModeSwitchCommand := FALSE;
		ELSIF eModeChangeTo = IPRO_CURRENT_MODE_TORQUE THEN
			bControlModeSwitchCommand := TRUE;
		END_IF
	IPRO_CTRL_MODE_POSITION_SPEED:
		IF eModeChangeTo = IPRO_CURRENT_MODE_POSITION THEN
			bControlModeSwitchCommand := FALSE;
		ELSIF eModeChangeTo = IPRO_CURRENT_MODE_SPEED THEN
			bControlModeSwitchCommand := TRUE;
		END_IF
	IPRO_CTRL_MODE_SPEED_TORQUE:
		IF eModeChangeTo = IPRO_CURRENT_MODE_SPEED THEN
			bControlModeSwitchCommand := FALSE;
		ELSIF eModeChangeTo = IPRO_CURRENT_MODE_TORQUE THEN
			bControlModeSwitchCommand := TRUE;
		END_IF
	
END_CASE

arrAddressWrite[0][2] :=  BOOL_TO_WORD(bControlModeSwitchCommand); 

IF eCurrentMode = eModeChangeTo THEN
	MS_SwitchMode := TRUE;
ELSE
	MS_SwitchMode := FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitalized" Id="{c0b072b8-11b2-49e7-943c-d6804dcfcc94}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitalized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bBusy := FALSE;
arrAddressRead[0][0] := 4000;// motor speed FB //0.1 r/min // 4000, 4001
arrAddressRead[0][1] := 2;
arrAddressRead[0][2] := E_ModbusFunction.ReadHoldingRegisters;

arrAddressRead[1][0] := 4004;// motor position FB// reference unit 
arrAddressRead[1][1] := 4;
arrAddressRead[1][2] := E_ModbusFunction.ReadHoldingRegisters;

arrAddressRead[2][0] := 4016;// motor Torque FB// reference unit 
arrAddressRead[2][1] := 1;
arrAddressRead[2][2] := E_ModbusFunction.ReadHoldingRegisters;

arrAddressRead[3][0] := 4064;// System status // 
arrAddressRead[3][1] := 1;
arrAddressRead[3][2] := E_ModbusFunction.ReadHoldingRegisters;

arrAddressRead[4][0] := 4068;// Current Mode 
arrAddressRead[4][1] := 1;
arrAddressRead[4][2] := E_ModbusFunction.ReadHoldingRegisters;

arrAddressRead[5][0] := 4198;// FaultCode
arrAddressRead[5][1] := 1;
arrAddressRead[5][2] := E_ModbusFunction.ReadHoldingRegisters;	
iNumAddRegionRead := 6;
// write
arrAddressWrite[0][0] := 1830;// 
arrAddressWrite[0][1] := 1;
arrAddressWrite[0][2] := BOOL_TO_WORD(bControlModeSwitchCommand); // disable first
arrAddressWrite[0][10]	:= E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[1][0] := 1822;// 
arrAddressWrite[1][1] := 1;
arrAddressWrite[1][2] :=  BOOL_TO_WORD(bFieldbusEnableServoCommand); // disable first
arrAddressWrite[1][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[2][0] := 1006;// 
arrAddressWrite[2][1] := 1;
arrAddressWrite[2][2] := eControlMode; 
arrAddressWrite[2][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[3][0] := 1070;//  //32 bit 1070, 1071
arrAddressWrite[3][1] := 2;
TempData_Word2Dint.idInt := LREAL_TO_DINT(lrPositivePositionSoftwareLimit);
arrAddressWrite[3][2] := TempData_Word2Dint.iWord[0];
arrAddressWrite[3][3] := TempData_Word2Dint.iWord[1];
arrAddressWrite[3][10] := E_ModbusFunction.WriteMultipleRegisters;

arrAddressWrite[4][0] := 1072;//  //32 bit 1072, 1073
arrAddressWrite[4][1] := 2;
TempData_Word2Dint.idInt := LREAL_TO_DINT(lrNagativePositionSoftwareLimit);
arrAddressWrite[4][2] := TempData_Word2Dint.iWord[0];
arrAddressWrite[4][3] := TempData_Word2Dint.iWord[1];
arrAddressWrite[4][10] := E_ModbusFunction.WriteMultipleRegisters;

arrAddressWrite[5][0] := 1180;// 
arrAddressWrite[5][1] := 1;
arrAddressWrite[5][2] :=  LREAL_TO_WORD(lrMaxSpeedLimitOfControlModeSwitch); 
arrAddressWrite[5][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[6][0] := 1824;// 32 bit 1825
arrAddressWrite[6][1] := 2;
TempData_Word2Dint.idInt := LREAL_TO_DINT(lrPositionCmd);
arrAddressWrite[6][2] := TempData_Word2Dint.iWord[0];
arrAddressWrite[6][3] := TempData_Word2Dint.iWord[1];
arrAddressWrite[6][10] := E_ModbusFunction.WriteMultipleRegisters;

arrAddressWrite[7][0] := 1826;//16 bit
arrAddressWrite[7][1] := 1;
TempData_Word2Int.iInt := LREAL_TO_INT(lrSpeedCmd);
arrAddressWrite[7][2] :=  TempData_Word2Int.iWord;
arrAddressWrite[7][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[8][0] := 1828;// 16 bit
arrAddressWrite[8][1] := 1;
TempData_Word2Int.iInt := LREAL_TO_INT(lrTorqueCmd);
arrAddressWrite[8][2] :=  TempData_Word2Int.iWord;
arrAddressWrite[8][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[9][0] := 1862;// 1
arrAddressWrite[9][1] := 1;
TempData_Word2Int.iInt := LREAL_TO_INT(ABS(lrMaxSpeed));
arrAddressWrite[9][2] := TempData_Word2Int.iWord;
arrAddressWrite[9][10] := E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[10][0] := 1020;// 32 bit 1825/ //0.1 PERCENT
arrAddressWrite[10][1] := 1;
arrAddressWrite[10][2] := LREAL_TO_WORD(ABS(lrMaxTorque*10));
arrAddressWrite[10][10]	:= E_ModbusFunction.WriteSingleRegister;

arrAddressWrite[11][0] := 1846;
arrAddressWrite[11][1] := 1;
arrAddressWrite[11][2] := BOOL_TO_WORD(THIS^.bEmergenCyStop);
arrAddressWrite[11][10]	:= E_ModbusFunction.WriteSingleRegister;
iNumAddRegionWrite := 12;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NagativePositionLimit" Id="{a1a1c3fa-f229-4e2d-9766-ec703c2de587}" FolderPath="SetBeforInit\">
      <Declaration><![CDATA[PROPERTY NagativePositionLimit : lreal]]></Declaration>
      <Get Name="Get" Id="{c561b735-862d-4dab-85ab-1ac0a4668272}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NagativePositionLimit := lrNagativePositionSoftwareLimit;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f60d0a52-4490-4908-8f23-4e565feffa59}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	lrNagativePositionSoftwareLimit := NagativePositionLimit;
END_IF

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PositionCmd" Id="{23e83466-f96c-4622-876f-5a6f8b31225b}" FolderPath="Parameters\">
      <Declaration><![CDATA[PROPERTY PositionCmd : lreal]]></Declaration>
      <Get Name="Get" Id="{4ffc8f22-a5cd-40fb-ac2c-b551154bd191}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositionCmd := lrPositionCmd;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PositionFeedBack" Id="{f1fa1bdb-f57d-44eb-ae97-8f48f67d5f70}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PositionFeedBack : lreal]]></Declaration>
      <Get Name="Get" Id="{00164334-2f50-4d35-9dd2-0ed5521dba27}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositionFeedBack := lrPositionFeedback;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PositionPositiveLimit" Id="{06450a26-3ac9-492f-8bb9-df1b1a771fb7}" FolderPath="SetBeforInit\">
      <Declaration><![CDATA[PROPERTY PositionPositiveLimit : lreal]]></Declaration>
      <Get Name="Get" Id="{33877c33-0487-4a3c-ad63-fd496fe84bd7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositionPositiveLimit := lrPositivePositionSoftwareLimit;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{900ac512-6122-4a49-8d3e-903adf79f440}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eState = IPRO_UNINITIALIZED THEN
	lrPositivePositionSoftwareLimit := PositionPositiveLimit;
END_IF

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ReallyError" Id="{131e458f-64bc-44a3-a841-415854b490d0}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY ReallyError : bool]]></Declaration>
      <Set Name="Set" Id="{15d805cb-fa21-450c-8426-92b4717cf052}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReallyError := bReallyError;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SpeedCmd" Id="{0a3d1347-d85b-4fe3-ba98-003bcfd016d4}" FolderPath="Parameters\">
      <Declaration><![CDATA[PROPERTY SpeedCmd : LREAL // r/ minute]]></Declaration>
      <Get Name="Get" Id="{ff03e774-b178-46dd-98e1-0a1339fb2aca}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SpeedCmd := lrSpeedCmd;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f22aed52-55fa-44fd-adb4-6e7498b50529}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[lrSpeedCmd := SpeedCmd;
TempData_Word2Int.iInt := LREAL_TO_INT(lrSpeedCmd*10);
arrAddressWrite[7][2] :=  TempData_Word2Int.iWord;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SpeedFeedback" Id="{8c0c65e8-744a-4ad5-a009-67c9db3f6e5a}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY SpeedFeedback : Lreal]]></Declaration>
      <Get Name="Get" Id="{364a84ad-39b8-4928-b5bb-abe5794f9595}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SpeedFeedback := lrSpeedFeedback;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{ca3be74d-8a42-48c3-bc02-f193a7afc1dd}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY State : E_IPro_State]]></Declaration>
      <Get Name="Get" Id="{34666fd9-328f-4f91-a8b2-ddcc78b6d879}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StateMachine" Id="{8d3ffbfd-6d5e-4328-9d69-29932a291b26}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine
VAR_INPUT
END_VAR

VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eState OF
	IPRO_UNINITIALIZED:
		MS_Uninitalized();
		
	IPRO_INITIALIZING:
		MS_Initializing();
		
	IPRO_READY_INITIALIZED:
		MS_ReadyInitialized();
		
	IPRO_IDLE:
		MS_Idle();
		
	IPRO_HOME:
		MS_Home();
		
	IPRO_HOME_DONE:
		MS_HomeDone();
		
	IPRO_MOVE_ABSOLUTE:
		MS_MoveAbsolute();
	
	IPRO_MOVE_ABSOLUTE_DONE:
		MS_MoveAbsoluteDone();
		
	IPRO_MOVE_TORQUE:
		MS_MoveTorque();
		
	IPRO_MOVE_TORQUE_DONE: 
		MS_MoveTorqueDone();
	
	IPRO_STOP:
		MS_Stop();
	
	IPRO_STOP_DONE:
		MS_StopDone();
		
	IPRO_RESET:
		MS_Reset();
	
	IPRO_RESET_DONE:
		MS_ResetDone();
		
	IPRO_ABORTING:
		MS_Aborting();
	

		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{945903a2-3273-4225-9050-43cbdf878bdb}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY Status : E_IProStatus]]></Declaration>
      <Get Name="Get" Id="{d6f6803a-14f1-44f6-b590-ec4070c2bb8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status := eSystemStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TorqueCmd" Id="{fc7bc3e0-4bca-41e7-a5ee-2bbc532aa88e}" FolderPath="Parameters\">
      <Declaration><![CDATA[PROPERTY TorqueCmd : lreal // %]]></Declaration>
      <Get Name="Get" Id="{9b9e5f35-2aeb-4fe1-bf67-9fdf730cacc9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TorqueCmd :=  lrTorqueCmd ;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TorqueFeedback" Id="{f47dfc44-d2a1-41d7-a3ca-f94ced010654}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY TorqueFeedback : lreal]]></Declaration>
      <Get Name="Get" Id="{41d90d48-da2f-46b1-b277-8d115eea513d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TorqueFeedback := lrTorqueFeedback;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_IPRO_ModbusRTU">
      <LineId Id="428" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="665" Count="3" />
      <LineId Id="670" Count="2" />
      <LineId Id="664" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.Active.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.ControlMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.ControlMode.Set">
      <LineId Id="8" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.ControlModeSwitchCmd.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.Convert">
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.CurrentMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.Enable.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.ErrorID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.InPosition.Get">
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.IsHomed.Get">
      <LineId Id="9" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.IsInTorque.Get">
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.IsStop.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MaxSpeed.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MaxSpeed.Set">
      <LineId Id="9" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MaxTorque.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MaxTorque.Set">
      <LineId Id="8" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_Abort">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_Home">
      <LineId Id="2" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_Init">
      <LineId Id="5" Count="11" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_MoveAbsolute">
      <LineId Id="2" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_MoveTorque">
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="21" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_Reset">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MR_Stop">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Aborting">
      <LineId Id="6" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Home">
      <LineId Id="6" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_HomeDone">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Idle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Initializing">
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="3" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_MoveAbsolute">
      <LineId Id="6" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_MoveAbsoluteDone">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_MoveTorque">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_MoveTorqueDone">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_ReadyInitialized">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Reset">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_ResetDone">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Stop">
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="2" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_StopDone">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="1" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_SwitchMode">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="38" Count="3" />
      <LineId Id="24" Count="1" />
      <LineId Id="43" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="16" Count="1" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.MS_Uninitalized">
      <LineId Id="123" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="23" Count="13" />
      <LineId Id="116" Count="0" />
      <LineId Id="38" Count="29" />
      <LineId Id="119" Count="0" />
      <LineId Id="69" Count="29" />
      <LineId Id="115" Count="0" />
      <LineId Id="100" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.NagativePositionLimit.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.NagativePositionLimit.Set">
      <LineId Id="10" Count="2" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.PositionCmd.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.PositionFeedBack.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.PositionPositiveLimit.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.PositionPositiveLimit.Set">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.ReallyError.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.SpeedCmd.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.SpeedCmd.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.SpeedFeedback.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.StateMachine">
      <LineId Id="3" Count="0" />
      <LineId Id="100" Count="7" />
      <LineId Id="137" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="109" Count="4" />
      <LineId Id="144" Count="0" />
      <LineId Id="115" Count="4" />
      <LineId Id="141" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="121" Count="14" />
      <LineId Id="92" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.Status.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.TorqueCmd.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IPRO_ModbusRTU.TorqueFeedback.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>