<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_UniversalVFDModbus" Id="{fd8d6acc-7bd2-4bb5-8c89-f74852cd1b9f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK abstract FB_UniversalVFDModbus EXTENDS FB_ModbusSlaveRtu IMPLEMENTS I_UniversalVFD
VAR
	eVfdState	: E_Vfd_State;
	bInit	: BOOL;
	bBusy	: BOOL;
	bReset	: BOOL;
	bStop	: BOOL;
	bAbort : BOOL;
	bWarning : BOOL;// status
	bRunningForward	: BOOL;// in state running forward
	bRunningReverse	: BOOL; // in state running reverse
	bRanForward	: BOOL;
	bRanReverse	: BOOL;
	lrHzActual	: LREAL;
	lrDcVoltage		: LREAL;
	lrVacOutToMotor	: LREAL;
	lrCurrent	: LREAL;	
	lrPowerKw	: LREAL;	
	eVfdStatus	: E_VFD_Status;
	lrHzControl	: LREAL;// value in range(0.0-50.0Hz)
	iErrorID		: UDINT;

	lrSpeed : LREAL;
	lrTorque : LREAL;
	lrTotalKwh : LREAL;
	lrRatedPower : LREAL;
	bActive: BOOL;
	bOverLoad: BOOL;
	bStopLog: BOOL;
	bStopped: BOOL;
	
	VFD_CTRL_RESET_FAULT : WORD;
	VFD_CTRL_RUN_FORWARD :WORD;
	VFD_CTRL_RUN_REVERSE :WORD ;
	VFD_CTRL_STOP_FREE 		:WORD ;
	VFD_CTRL_STOP_SPEED_DOWN	:WORD ;
	
	tonStopDelay: Ton;
	// time delay after status = stop
	tStopDelay: TIME := T#4S;
END_VAR
VAR CONSTANT
	// index
	iCTRL_WORD	: UINT := 1;
	iCTRL_FREQUENCY_WORD :UINT := 0;
	iSTATUS_WORD	: UINT := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[StateMachine();
CASE eVfdStatus OF
	VFD_STATUS_RUNNING_FORWARD :
		bRanForward := TRUE;
		bRanReverse := FALSE;
		bStopped := FALSE;
	VFD_STATUS_RUNNING_REVERSE:
		bRanForward := FALSE;
		bRanReverse := TRUE;
		bStopped := FALSE;
	VFD_STATUS_FAULT,VFD_STATUS_STOP:
		bRanForward := FALSE;
		bRanReverse := FALSE;
		bStopped := TRUE;
		
END_CASE
bError := eVfdStatus = VFD_STATUS_FAULT;
bActive := eVfdState >= VFD_IDLE;
SUPER^();
CASE eVfdState OF
	VFD_INITIALIZING..VFD_RESET_DONE, VFD_ABORTING:
		tonConfirmReallyError(
			IN := bError OR bModbusError,
			PT := timeConfirmReallyError,
			Q => bReallyError 
		);
END_CASE]]></ST>
    </Implementation>
    <Folder Name="MR" Id="{f3a3e522-a81c-41cc-b27b-dd5d55174206}" />
    <Folder Name="MS" Id="{3c98f81a-bb00-4ab4-8c00-b47b98f5a50e}" />
    <Folder Name="Pro" Id="{7c18a100-0569-4c54-a015-9f1f8eff674a}" />
    <Property Name="Active" Id="{248f35d9-0534-4079-b983-4dfb71e4f83d}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Active : REFERENCE TO  bool]]></Declaration>
      <Get Name="Get" Id="{2e5b10b5-ecb5-4334-9ad9-62ac8d555930}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Active REF= bActive;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AcVoltageToMotor" Id="{e040051a-2a43-46a0-8a44-7b0b368e71d6}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY AcVoltageToMotor : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{a75c5611-9da0-4952-a9d8-2818606333c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AcVoltageToMotor ref= lrVacOutToMotor;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{bfb2da44-65c7-4e0a-8206-1b28790c7fa7}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Busy : reference to bool]]></Declaration>
      <Get Name="Get" Id="{3fa3786e-bf57-47d1-8f99-4ea0fcc21d83}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy ref= bBusy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Convert" Id="{8638a3f3-4263-4048-a86b-3983221cb27f}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD Convert : BOOL
VAR_INPUT
	iRegionNo	:	INT;
	pReadData	:	POINTER TO word;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*CASE iRegionNo OF
	0:
		// Status word
		Inverter_Ready		:=  pReadData[0].0;
		InverterReadyToRun	:=  pReadData[0].1;
		InverterRunning		:=  pReadData[0].2;
		InverterFaultActive :=  pReadData[0].3;
		OFF2_active			:= NOT pReadData[0].4;
		OFF3_active			:= NOT  pReadData[0].5;
		ON_inhibit_active 	 := pReadData[0].6;
		Inverter_warning_active := pReadData[0].7;
		Deviation_setpoint_OR_ActiveValue := NOT pReadData[0].8;
		PZD_control 		:= pReadData[0].9;
		Motor_current_Or_torque_limit  := NOT pReadData[0].11;
		Brake_open	 := pReadData[0].12;
		Motor_overload := NOT pReadData[0].13;
		Motor_RunRight	:= pReadData[0].14;
		Inverter_overload :=  NOT pReadData[0].15;
		
		IF InverterFaultActive THEN
			eStatus := VFD_STATUS_FAULT;
		ELSIF InverterFaultActive THEN
			eStatus := VFD_STATUS_WARNING;
		ELSIF InverterRunning THEN
			IF Motor_RunRight THEN
				eStatus := VFD_STATUS_RUNNING_FORWARD;
			ELSE
				eStatus := VFD_STATUS_RUNNING_REVERSE;
			END_IF
		ELSIF NOT InverterRunning THEN
			eStatus := VFD_STATUS_STOP;
		END_IF

		// Speed word
		lrHz_actual := WORD_TO_LREAL( pReadData[1])*50/16383;
		
	1:
		///  actual  Speed ( rpm) (unit A : Scale factor 1), Current ( A , 100, , Torque (Nm, 100)
	//, Actual Power (kw, 100), Total Kwh( 1), Dc bus Voltage(1), REFERENCE( hz, 100), RATED PWR( 100),OUTPUT VOLTS(1)
		lrSpeed := pReadData[0];
		lrCurrent := WORD_TO_LREAL(pReadData[1])/100;
		lrTorque := WORD_TO_LREAL(pReadData[2])/100;
		lrPower := WORD_TO_LREAL(pReadData[3])/100;
		lrTotalKwh := WORD_TO_LREAL(pReadData[4]);
		lrDc_Voltage := WORD_TO_LREAL(pReadData[5]);
		lrRatedPower := WORD_TO_LREAL(pReadData[7])/100;
		lrVAC_OutToMotor := WORD_TO_LREAL(pReadData[8]);
END_CASE
*)
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Current" Id="{df2898d1-d53c-4e49-bebf-d9596acf7350}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Current : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{7840d247-f7a3-4d31-a41e-327be16de82f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current ref= lrCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DcVoltage" Id="{4b0563e7-60d5-45c0-80ed-6cb8218ead30}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY DcVoltage : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{4163d4e2-2c56-4214-9300-5989979b2849}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DcVoltage ref= lrDcVoltage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{96a1ef08-7d27-43d5-95f8-384722c0cd2f}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY ErrorID : reference to UDINT]]></Declaration>
      <Get Name="Get" Id="{7a2d77ea-644e-4d09-9c4f-06ff24296237}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID ref= iErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FirstCycle" Id="{d0749a6c-4309-4783-9ca6-eadbfcd7d7b7}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD  FirstCycle 
VAR_INPUT
	sName : STRING;
	iUnitID : BYTE ; // modbus address of the device : 1- 255
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sName := sName;
THIS^.iUnitID := iUnitID;
(*(*HSW (speed setpoint), HIW (actual speed), STW (control word), ZSW (status word) refer to
control data. For more information, see parameters r2018 and P2019 in Chapter "Parameter
list (Page 147)*)
//ZSW  (status WORD), HIW (actual speed)
	arrAddress[0][0] := 109;
	arrAddress[0][1]	:= 2;

///  actual  Speed ( rpm) (unit A : Scale factor 1), Current ( A , 100, , Torque (Nm, 100)
	//, Actual Power (kw, 100), Total Kwh( 1), Dc bus Voltage(1), REFERENCE( hz, 100), RATED PWR( 100),OUTPUT VOLTS(1)
	arrAddress[1][0] := 24;
	arrAddress[1][1] := 10;

	
iNumAddRegion	:= 2;
/////write control  VFD
	
// Frequency

arrAddressWrite[0][0]	:= 100;
arrAddressWrite[0][1] 	:= 1;
arrAddressWrite[0][2]	:= LREAL_TO_WORD( FC_ScaleValue(	rangeRawMin := 0,
															rangeRawMax := 50,
															RangeScaleMin :=0,
															RangeScaleMax := 16384,
															ValueRaw := lrHz_Control) );
// Control word																	
arrAddressWrite[1][0]	:= 99;
arrAddressWrite[1][1] := 1;
arrAddressWrite[1][2]	:= 1150; //VFD_CTRL_STOP_SPEED_DOWN
iNumAddRegionWrite := 2;
*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="HzActual" Id="{085f7d57-1175-4177-92fc-d0932167f162}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY HzActual : REFERENCE TO  LReal]]></Declaration>
      <Get Name="Get" Id="{17cdfd9c-9186-4c43-9e6d-8ffe2a39adb1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HzActual ref= lrHzActual;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="HzControl" Id="{92a91086-914b-4bad-84ee-8590914bbbe8}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY HzControl : reference to LReal]]></Declaration>
      <Get Name="Get" Id="{80939dba-77b0-4c70-b414-7c310cf240e2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HzControl ref= lrHzControl;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InHz" Id="{bd6a5744-d2d1-4bbb-9451-991472a8a079}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY InHz : bool]]></Declaration>
      <Get Name="Get" Id="{c50da6e4-adab-4e42-9c1a-3d616d5562e0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InHz :=  F_InRange( bound1 := lrHzControl +1,
					bound2 := lrHzControl -1,
					value := lrHzActual) ;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isRunForward" Id="{530022fc-b0a8-4067-9ca0-5f623dadd3d2}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isRunForward : bool]]></Declaration>
      <Get Name="Get" Id="{8eca8758-3a5d-49bd-a784-190aa5ead541}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isRunForward := bRanForward;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsRunning" Id="{b530bfa5-e84e-408c-aaaa-7e1f96e8a90a}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY IsRunning : bool]]></Declaration>
      <Get Name="Get" Id="{2db6c004-a6da-4278-8c46-b645d6af7143}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsRunning := eVfdStatus = VFD_STATUS_RUNNING_FORWARD
			 OR  eVfdStatus = VFD_STATUS_RUNNING_REVERSE;
	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isRunReverse" Id="{a1b5a0e9-3535-416a-a324-64b2ed62421d}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isRunReverse : bool]]></Declaration>
      <Get Name="Get" Id="{cf60e44f-322e-47d7-bc00-e9e3374faefb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isRunReverse := bRanReverse;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="isStop" Id="{b2dcf4c1-7e4c-4950-aa01-317f8dff1fe0}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY isStop : bool]]></Declaration>
      <Get Name="Get" Id="{8450012d-8bd8-4bb0-9ce2-31b14828a8b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[isStop := bStopped;
		]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MR_Abort" Id="{0652cd1f-8358-436c-b6d6-cd2b3c63779c}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Abort : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_INITIALIZING THEN
	bAbort := TRUE;
	eVfdState := VFD_ABORTING;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : abort requested'));
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_UNINITIALIZED THEN
	bAbort 		:= FALSE;
	MR_Abort	:= TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : abort done'));
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Init" Id="{10f4ed1f-54f3-4350-ae84-73832517b609}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Init : bool
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVFDState = VFD_UNINITIALIZED THEN
	bInit := TRUE;
	MR_Init := FALSE;
	eVfdState := VFD_INITIALIZING;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : initialization requested'));
	bBusy := TRUE;
	
ELSIF eVFDState = VFD_READY_INITIALIZED THEN
	bInit := FALSE;
	MR_Init := TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : initialization done'));
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Reset" Id="{bf1dc21b-2f7f-4436-a1dc-6876cbe34721}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_IDLE AND bError THEN
	bReset := TRUE;
	eVfdState := VFD_RESET;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : reset requested'));			
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RESET_DONE THEN
	bError := FALSE;
	iErrorID := 0;
	bReset := FALSE;
	MR_Reset := TRUE;
	bBusy := FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : reset done'));		
		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_RunForward" Id="{f2f3dd06-bdd8-4d87-b04a-6208e4158e93}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_RunForward : BOOL
VAR_INPUT
	hz : LREAL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState = VFD_IDLE  AND (NOT  F_InRange( 	bound1 := lrHzControl + 0.01,
												bound2 := lrHzControl - 0.01,
												value :=  hz)
								OR bRanReverse
								OR bStopped)
THEN
	lrHzControl := hz;
	bRunningForward := TRUE;
	MR_RunForward := FALSE;
	eVfdState := VFD_RUN_FORWARD;
	fbMachineLogger.MR_AddLogs( sLogMessage := FUN_MergeStrings4(  sName,' : run ',LREAL_TO_STRING( lrHzControl),' forward requested'));		
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RUN_FORWARD_DONE THEN
	bRunningForward := FALSE;
	MR_RunForward := TRUE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : run forward done'));	
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_RunReverse" Id="{60b3c7e3-bfe7-4f56-a3de-0900b804ca81}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_RunReverse : BOOL// must stop before call run reverse or forward
VAR_INPUT
	hz : LREAL; // >0 and < 50;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState = VFD_IDLE  AND (NOT  F_InRange( 	bound1 := lrHzControl + 0.01,
												bound2 := lrHzControl - 0.01,
												value :=  hz)
								OR bRanForward
								OR bStopped)
THEN
	lrHzControl := hz;
	bRunningReverse := TRUE;
	MR_RunReverse := FALSE;
	eVfdState := VFD_RUN_REVERSE;
	fbMachineLogger.MR_AddLogs( sLogMessage := FUN_MergeStrings4(  sName,' : run ',LREAL_TO_STRING( lrHzControl),' forward requested'));		
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_RUN_REVERSE_DONE THEN
	bRunningReverse := FALSE;
	MR_RunReverse := TRUE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : run forward done'));
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_Stop" Id="{5154dd24-3d5c-4d9f-bc6e-ecd7665c5f2a}" FolderPath="MR\">
      <Declaration><![CDATA[METHOD MR_Stop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eVfdState >= VFD_IDLE 
	AND eVfdState <> VFD_STOP_DONE
	AND NOT bStopped
THEN
	IF NOT bStopLog THEN 
		fbMachineLogger.MR_AddLogs(CONCAT(sName,' : stop requested'));
		bStopLog := TRUE;	
	END_IF
	
	bStop := TRUE;
	eVfdState := VFD_STOP;
	bBusy := TRUE;
	
ELSIF eVfdState = VFD_STOP_DONE THEN
	bStop 		:= FALSE;
	MR_Stop 	:= TRUE;
	bStopLog 	:= FALSE;
	fbMachineLogger.MR_AddLogs(CONCAT(sName,' : stop done'));	
	bBusy := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Aborting" Id="{ad704b6c-09e0-4c8a-89dd-99c32b7d53a4}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Aborting]]></Declaration>
      <Implementation>
        <ST><![CDATA[lrHzControl := 0;
bInit := FALSE;
bRunningForward := FALSE;
bRunningReverse := FALSE;
bReset := FALSE;
bRanForward := FALSE;
bRanReverse := FALSE;
bOverLoad := FALSE;
bStop := FALSE;
bStopLog := FALSE;
bStopped := FALSE;
THIS^.tonStopDelay(IN :=FALSE);
IF eVfdStatus = VFD_STATUS_STOP OR eVfdStatus = VFD_STATUS_FAULT THEN
	eVfdState := VFD_UNINITIALIZED;
END_IF ]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Idle" Id="{39ad5f92-ecc8-4350-8dcc-ea7c447fca61}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Idle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Initializing" Id="{824ac014-d11e-437b-82ec-de23cf38f6ee}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD  PROTECTED  MS_Initializing
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// from Subclass call Super^.MS_Initializing
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RESET_FAULT;
IF eVfdStatus = VFD_STATUS_READY_TO_RUN THEN
	eVFDState := VFD_READY_INITIALIZED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ReadyInitialized" Id="{37e63d86-802f-406d-b8f9-5ae975bdc272}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ReadyInitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInit THEN
	eVfdState := VFD_IDLE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Reset" Id="{f0d93329-f152-4fd2-8c7f-871b868d0feb}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RESET_FAULT;
IF THIS^.evfdStatus <>  VFD_STATUS_NOT_RESPOND AND
	THIS^.evfdStatus <>  VFD_STATUS_FAULT THEN
	evfdState := VFD_RESET_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ResetDone" Id="{80e652ac-4a03-414c-a1ef-06420ec2c202}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ResetDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bReset THEN
	evfdState := VFD_IDLE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunForward" Id="{82195713-76f3-44d4-af66-4e860180a0ce}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_RunForward
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*arrAddressWrite[iCtrlFrequencyWord][2] :=  LREAL_TO_WORD( 
											FC_ScaleValue(		rangeRawMin := 0,
																rangeRawMax := 50,
																RangeScaleMin := WORD_TO_LREAL( wHzWordValueMin),
																RangeScaleMax := WORD_TO_LREAL( wHzWordValueMax),
																ValueRaw := lrHzControl) 
														);*)
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RUN_FORWARD;
IF eVfdStatus = VFD_STATUS_RUNNING_FORWARD 
(*AND F_InRange( bound1 := lrHzControl + 1,
				bound2 := lrHzControl -1,
				value := lrHzActual)*)
THEN
	eVFDState := VFD_RUN_FORWARD_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunForwardDone" Id="{4d3ed909-9988-4d27-b6a5-98918b4e0b34}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_RunForwardDone

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRunningForward THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunReverse" Id="{22900e6c-e0c2-4cba-a7e4-7cb557ba4e9e}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED  MS_RunReverse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*arrAddressWrite[iCtrlFrequencyWord][2] :=  LREAL_TO_WORD( 
											FC_ScaleValue(		rangeRawMin := 0,
																rangeRawMax := 50,
																RangeScaleMin := WORD_TO_LREAL( wHzWordValueMin),
																RangeScaleMax := WORD_TO_LREAL( wHzWordValueMax),
																ValueRaw := lrHzControl) 
														);*)
arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_RUN_REVERSE;
IF eVfdStatus = VFD_STATUS_RUNNING_REVERSE 
(*AND F_InRange( bound1 := lrHzControl + 1,
				bound2 := lrHzControl -1,
				value := lrHzActual)*)
THEN
	eVFDState := VFD_RUN_REVERSE_DONE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_RunReverseDone" Id="{cf1e0f42-763e-4c75-ac70-f2d87ce26a28}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_RunReverseDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRunningReverse THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Stop" Id="{65edc64e-45a2-4831-b125-cccd979efc34}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD protected  MS_Stop 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[arrAddressWrite[iCTRL_WORD][2]	:= VFD_CTRL_STOP_SPEED_DOWN;
(*tonStopDelay( in := eVfdStatus = VFD_STATUS_STOP,
				PT := tStopDelay);*)
IF eVfdStatus = VFD_STATUS_STOP THEN
 eVfdState := VFD_STOP_DONE;	
END_IF
(*IF tonStopDelay.Q THEN
	tonStopDelay(IN := FALSE);
	
END_IF*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="Ms_StopDone" Id="{0b119057-c48d-4681-b54d-50db7368ad87}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD protected Ms_StopDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bStop THEN
	eVfdState := VFD_IDLE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitialized" Id="{e57b3e42-d437-4da7-a50f-5afe089940cf}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitialized
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="Overload" Id="{5957236b-6615-4544-ba72-3c42899ddd6f}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Overload : reference TO BOOL]]></Declaration>
      <Get Name="Get" Id="{57c5f420-3551-4e5b-b71e-062edf3b530b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Overload REF= bOverLoad;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PowerKw" Id="{48775f63-c7bf-4af7-8ac9-724f8f086574}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY PowerKw : REFERENCE TO LREAL
]]></Declaration>
      <Get Name="Get" Id="{df981b4e-1d41-4766-9c53-e333cd121628}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PowerKw ref= lrPowerKw;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Speed" Id="{05b0b761-4d95-4629-aa5a-3dcdbc2dec00}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Speed : Reference to lreal]]></Declaration>
      <Get Name="Get" Id="{e0273508-a395-4e45-8a9f-24350d25a6df}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Speed REF= lrSpeed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{eb02e7a2-65a3-4091-85a2-7853e4e76990}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY State : reference to E_Vfd_State]]></Declaration>
      <Get Name="Get" Id="{90203748-2e2d-4061-9cc9-8ff81bd63590}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State REF= eVfdState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StateMachine" Id="{a28b4839-7dea-4f43-a0dd-a64c5ad12c77}" FolderPath="MS\">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eVfdState OF
	VFD_UNINITIALIZED :
		MS_Uninitialized();
		
	VFD_INITIALIZING	:
		MS_Initializing();
		
	VFD_READY_INITIALIZED :
		MS_ReadyInitialized();
		
	VFD_IDLE:
		MS_Idle();
	
	VFD_RUN_FORWARD	:
		MS_RunForward();
		
	VFD_RUN_FORWARD_DONE:
		MS_RunForwardDone();
	
	VFD_RUN_REVERSE	:
		MS_RunReverse();
	
	VFD_RUN_REVERSE_DONE:
		MS_RunReverseDone();
	
	VFD_STOP		:
		MS_Stop();
		
	VFD_STOP_DONE	:
		Ms_StopDone();
		
	VFD_RESET	:
		MS_Reset();
		
	VFD_RESET_DONE	:
		MS_ResetDone();
		
	VFD_ABORTING :
		MS_Aborting();
	
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Status" Id="{087bc722-873f-43f4-a3f0-ed4a230ad30f}" FolderPath="Pro\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Status : reference to E_VFD_Status]]></Declaration>
      <Get Name="Get" Id="{6608a8ef-53ca-4b87-8606-c98444f8029e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Status REF= eVfdStatus;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="timeStopDelay" Id="{23956b3e-67a2-4d6d-800c-eee10a2f627e}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY timeStopDelay : time]]></Declaration>
      <Get Name="Get" Id="{4fd094a7-1d01-49a8-8f40-8267c8a3a85e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[timeStopDelay := THIS^.tStopDelay;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b6fa5949-2626-42d2-9c03-df63e61791c3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[tStopDelay := timeStopDelay;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Torque" Id="{3a714a99-fc23-4bf9-819f-f6995e3d8134}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY Torque : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{eb049a2d-804b-453d-9dcd-143614074192}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Torque ref= Torque;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TotalKwh" Id="{df528c9e-51e4-4219-9b94-b69576dbef37}" FolderPath="Pro\">
      <Declaration><![CDATA[PROPERTY TotalKwh : reference to lreal]]></Declaration>
      <Get Name="Get" Id="{c57beb9d-1ecd-4ea2-96fa-6da7ee11f4a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TotalKwh REF= TotalKwh;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Warning" Id="{b540e38b-08da-4ae3-8220-2847dbf23316}" FolderPath="Pro\">
      <Declaration><![CDATA[// not all vfd modbus available this function 
PROPERTY Warning : reference to bool]]></Declaration>
      <Get Name="Get" Id="{e83b75d1-a5fc-40fe-bc08-b5d167853f32}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Warning  ref= bWarning;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_UniversalVFDModbus">
      <LineId Id="87" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="214" Count="1" />
      <LineId Id="217" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="223" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="279" Count="6" />
      <LineId Id="278" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Active.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.AcVoltageToMotor.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Busy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Convert">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="27" Count="8" />
      <LineId Id="37" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="50" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Current.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.DcVoltage.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.ErrorID.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.FirstCycle">
      <LineId Id="61" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="60" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="49" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.HzActual.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.HzControl.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.InHz.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isRunForward.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.IsRunning.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isRunReverse.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.isStop.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Abort">
      <LineId Id="9" Count="4" />
      <LineId Id="23" Count="0" />
      <LineId Id="14" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Init">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Reset">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_RunForward">
      <LineId Id="13" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_RunReverse">
      <LineId Id="11" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="15" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MR_Stop">
      <LineId Id="5" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="9" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Aborting">
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="1" />
      <LineId Id="21" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Idle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Initializing">
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_ReadyInitialized">
      <LineId Id="6" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Reset">
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_ResetDone">
      <LineId Id="6" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunForward">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunForwardDone">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunReverse">
      <LineId Id="20" Count="5" />
      <LineId Id="5" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="27" Count="5" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_RunReverseDone">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Stop">
      <LineId Id="23" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Ms_StopDone">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.MS_Uninitialized">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Overload.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.PowerKw.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Speed.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.StateMachine">
      <LineId Id="2" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="45" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Status.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.timeStopDelay.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.timeStopDelay.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Torque.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.TotalKwh.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVFDModbus.Warning.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>